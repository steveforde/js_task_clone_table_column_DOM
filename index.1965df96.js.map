{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,IAAM,EAAY,SAAS,oBAAoB,CAAC,MAI7C,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,EAAG,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,EAAA,I,A,W,M,A,U,wI,G,EAAW,OAAO,CAAC,SAAA,CAAtB,EAEC,IAAM,EAAO,EAAQ,KAAK,CAQb,EARwB,CAGrC,EAAQ,QAAQ,CAKA,EALkB,CAAC,KAAK,CAAC,EAAK,SAAS,CAAC,CAAA,GAC1D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write your code here\n// Get all the rows in the table\nvar tableElem = document.getElementsByTagName(\"tr\");\n// Function to clone and insert a cell\nfunction personalizeTable(cellIndex, insertAfterIndex) {\n    _to_consumable_array(tableElem).forEach(function(element) {\n        // Copy the specified cell\n        var copy = element.cells[cellIndex];\n        // Insert the copied cell after the specified cell\n        element.children[insertAfterIndex].after(copy.cloneNode(true));\n    });\n}\n// Call the function with the desired cell indices\npersonalizeTable(1, 3);\n\n//# sourceMappingURL=index.1965df96.js.map\n","'use strict';\n\n// write your code here\n// Get all the rows in the table\nconst tableElem = document.getElementsByTagName('tr');\n\n// Function to clone and insert a cell\nfunction personalizeTable(cellIndex, insertAfterIndex) {\n  [...tableElem].forEach(element => {\n    // Copy the specified cell\n    const copy = element.cells[cellIndex];\n\n    // Insert the copied cell after the specified cell\n    element.children[insertAfterIndex].after(copy.cloneNode(true));\n  });\n}\n\n// Call the function with the desired cell indices\npersonalizeTable(1, 3);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","tableElem","document","getElementsByTagName","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","element","copy","cells","children","after","cloneNode"],"version":3,"file":"index.1965df96.js.map"}